# Copyright (C) 2008 Michael Homer <=mwh>
# Copyright (C) 2024 Sage I. Hendricks <sage.message@email.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import Freshen


class FreshenRequest:
    """Represents a single request for updates data from Freshen.

    Iterable, giving a generator of the update data corresponding
    to this request.

    Sets `cacheDataID` to the value for this request. `updateCount`
    *may* be updated by Freshen when the total number of updates
    available is known.

    >>> mode = 'updating'
    >>> examineSet = frozenset(['Freshen'])
    >>> skipSet = frozenset()
    >>> types = ('official_package', 'recipe')
    >>> r = FreshenRequest(mode, examineSet, skipSet, False, False, types, \\
    ...                False, None, False, False, False)
    >>> r.cacheDataID == hash((examineSet, types, False, mode))
    True
    >>> FreshenRequest(None, 1,2,3,4,5,6,7,8,9,10)
    Traceback (most recent call last):
    ...
    Exception: Mandatory mode parameter not provided.
    """

    def __init__(self, mode, examineSet, skipSet, noCache, forceCache,
                 types, noRevisions, onExamine, last, includeFlagChanges):
        if not mode:
            raise Exception("Mandatory mode parameter not provided.")
        self.mode = mode
        self.examineSet = examineSet
        self.skipSet = skipSet
        self.noCache = noCache
        self.forceCache = forceCache
        self.types = tuple(types)
        self.noRevisions = noRevisions
        self.onExamine = onExamine
        self.includeFlagChanges = includeFlagChanges
        self.last = last
        cachetup = (examineSet, tuple(types), noRevisions, mode,
                    includeFlagChanges)
        self.cacheDataID = hash(cachetup)
        self.updates = None
        self.updateCount = 0

    def __iter__(self):
        if self.updates is not None:
            return iter(self.updates)
        return Freshen.updates(self)

if __name__ == '__main__':
    import doctest
    if doctest.testmod()[0]:
        exit(1)
